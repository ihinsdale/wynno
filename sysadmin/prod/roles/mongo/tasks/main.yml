---

- name: Install pip required for Ansible pip module
  apt: pkg=python-pip state=present
  sudo: yes

- name: Install virtualenv required for Ansible pip module if we ever want to use virtualenv
  apt: pkg=python-virtualenv state=present
  sudo: yes

- name: Install build-essential required for PyMongo
  apt: pkg=build-essential state=present
  sudo: yes

- name: Install python-dev required for PyMongo
  apt: pkg=python-dev state=present
  sudo: yes

  # Install MongoDB
- name: Import the public key for MongoDB used by the package management system
  shell: apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10
  sudo: yes

- name: Create a list file for MongoDB
  shell: echo 'deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen' | sudo tee /etc/apt/sources.list.d/mongodb.list

- name: Update apt
  apt: update_cache=yes
  sudo: yes

- name: Install MongoDB
  apt: pkg=mongodb-org=2.6.0 state=present
  sudo: yes

- name: Create /db/data directory
  shell: mkdir -p /home/deploy/{{ db_path }}

- name: Make the mongod user the owner of the directory
  command: chown mongod:mongod /home/deploy/{{ db_path }}
  sudo: yes

- name: Install PyMongo which is required for mongodb_user tasks below
  pip: name=pymongo
  sudo: yes

- name: Create the master mongo user who creates other user accounts
  mongodb_user: database=admin user={{ master_user }} password={{ master_user_password }} roles='userAdminAnyDatabase'

- name: Create the user used by the app to read and write
  mongodb_user: database=wynno-{{ app_env }} login_user={{ master_user }} login_password={{ master_user_password }} user={{ app_db_user }} password={{ app_db_user_password }} roles='readWrite'

- name: Copy over the mongod.conf file
  template: src=mongod.conf.j2 dest=/etc/mongod.conf
  sudo: yes
  notify: Restart mongo

- name: Stop mongo
  # Note we want to stop mongo here rather than use a notify handler, so that we can then
  # launch mongo again with the right parameters. (Maybe it's possible to use multiple notify handlers
  # but I won't worry about that for now)
  service: name=mongod state=stopped
  sudo: yes

- name: Launch mongo with authentication enabled and path to db
  shell: mongod --auth --dbpath /home/deploy/{{ db_path }}
  sudo: yes

- name: Copy script to open up mongo_port for db connections from nodeservers and pythonservers
  # Note we use a template file here so we can loop over all hosts in the nodeservers group
  # Otherwise we'd have to hardcode the names of the hosts to get the IPs for which we want to make ufw rules
  template: src=ufw_allow_node_and_python_servers.sh.j2 dest=/home/deploy/ufw_allow_node_and_python_servers.sh

- name: Execute that script to create the new ufw rules
  shell: sh ufw_allow_node_and_python_servers.sh

- name: Reload ufw to enable the new rules
  #ufw: state=reloaded
  command: ufw reload
  sudo: yes
